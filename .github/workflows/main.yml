name: Android CI

on:
  workflow_dispatch:
    inputs:
      run_mode:
        description: '请选择要执行的操作'
        type: choice
        required: true
        default: 'full_run'
        options:
          - build_only # 选项A：仅构建
          - full_run   # 选项B：构建、发布并上传

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # 原始权限，用于 checkout 和 create-release
      packages: write # 如果您使用 ghcr.io
      pull-requests: read # 如果需要读取pr信息

    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Determine Changelog Range
        id: changelog_range
        run: |
          # 获取最新的稳定版 (非 prerelease) 的 tag 作为起点
          # --repo ${{ github.repository }} 确保在 fork 的仓库里也能正确执行
          LATEST_TAG=$(gh release list --repo ${{ github.repository }} --exclude-preleases --limit 1 --json tagName --jq '.[0].tagName')

          if [[ -z "$LATEST_TAG" ]]; then
            # 如果没有找到任何稳定版 release，就从仓库的第一个 commit 开始
            echo "未找到稳定版 Release, 将从最初的 commit 开始生成日志。"
            BASE_REF=$(git rev-list --max-parents=0 HEAD)
          else
            echo "找到最新的稳定版 Release: $LATEST_TAG"
            BASE_REF=$LATEST_TAG
          fi

          echo "base_ref=$BASE_REF" >> $GITHUB_OUTPUT
          # 终点是当前触发工作流的 commit
          echo "head_ref=${{ github.sha }}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Storing key.properties
        run: |
          echo "${{ secrets.KEY_PROPERTIES }}" | base64 --decode > ./key.properties
          ls ./
          ls -l key.properties

      - name: Storing keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > ./app/key.keystore
          ls ./app
          ls -l ./app/key.keystore

      - name: Storing keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > ./key.keystore
          ls -l ./key.keystore

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: |
          ./gradlew :app:assembleRelease
          
          echo "APK_FILE=$(find app/build/outputs/apk -name '*arm64*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_ARMV7=$(find app/build/outputs/apk -name '*v7a*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_X86=$(find app/build/outputs/apk -name '*x86\-*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_X64=$(find app/build/outputs/apk -name '*x86\_64*.apk')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        name: Upload apk (arm64-v8a)
        with:
          name: app-arm64-v8a-release
          path: ${{ env.APK_FILE }}
      - uses: actions/upload-artifact@v4
        name: Upload apk (armeabi-v7a)
        with:
          name: app-armeabi-v7a-release
          path: ${{ env.APK_FILE_ARMV7 }}
      - uses: actions/upload-artifact@v4
        name: Upload apk (x86_64)
        with:
          name: app-x86_64-release
          path: ${{ env.APK_FILE_X64 }}
      - uses: actions/upload-artifact@v4
        name: Upload apk (x86)
        with:
          name: app-x86-release
          path: ${{ env.APK_FILE_X86 }}

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      # 获取今天已有的 releases 数量，用于生成序号
      - name: Get number of today's releases
        if: github.event.inputs.run_mode == 'full_run'
        id: release_count
        run: |
          DATE=${{ steps.date.outputs.date }}
          COUNT=$(gh release list --limit 100 | grep "$DATE" | wc -l)
          COUNT=$((COUNT + 1))
          printf "count=%02d\n" "$COUNT" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Generate Changelog
        if: github.event.inputs.run_mode == 'full_run'
        id: generate_changelog
        run: |
          CHANGELOG=$(git log ${{ steps.changelog_range.outputs.base_ref }}..${{ steps.changelog_range.outputs.head_ref }} --pretty=format:"* %s (%h)")
          echo "$CHANGELOG" > changelog.txt
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          echo "## Changes" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog artifact
        if: github.event.inputs.run_mode == 'full_run'
        uses: actions/upload-artifact@v4
        with:
          name: changelog-data
          path: changelog.txt

      - name: Create Release
        if: github.event.inputs.run_mode == 'full_run'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: release-${{ steps.date.outputs.date }}-${{ steps.release_count.outputs.count }}
          release_name: Release ${{ steps.date.outputs.date }}
          prerelease: true
          body: ${{ steps.generate_changelog.outputs.changelog }}

      - uses: actions/upload-release-asset@v1
        if: github.event.inputs.run_mode == 'full_run'
        name: Upload apk (arm64-v8a)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: YetAnotherCalendarWidget-arm64-v8a.apk
          asset_path: ${{ env.APK_FILE }}
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1
        if: github.event.inputs.run_mode == 'full_run'
        name: Upload apk (armeabi-v7a)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: YetAnotherCalendarWidget-armeabi-v7a.apk
          asset_path: ${{ env.APK_FILE_ARMV7 }}
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1
        if: github.event.inputs.run_mode == 'full_run'
        name: Upload apk (x86_64)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: YetAnotherCalendarWidget-x86_64.apk
          asset_path: ${{ env.APK_FILE_X64 }}
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1
        if: github.event.inputs.run_mode == 'full_run'
        name: Upload apk (x86)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: YetAnotherCalendarWidget-x86.apk
          asset_path: ${{ env.APK_FILE_X86 }}
          asset_content_type: application/zip


  upload:
    if: github.event.inputs.run_mode == 'full_run'
    name: Upload Release
    runs-on: ubuntu-latest
    needs:
      - build
      - telegram-bot-api
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .

      - name: Download Changelog Artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog-data

      - name: find apk
        run: |
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          echo "APK_FILE_UPLOAD=$(find apks -name '*arm64*.apk')" >> $GITHUB_ENV
          ls ./apks

      - name: Get Apk Info
        id: apk
        uses: JantHsueh/get-apk-info-action@master
        with:
          apkPath: ${{ env.APK_FILE_UPLOAD }}

      - name: Release
        run: |
          chmod +x telegram-bot-api-binary
          ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
          curl https://raw.githubusercontent.com/Steve-Mr/YetAnotherCalendarWidget/master/.github/scripts/upload.py -o uploadCI.py
          python uploadCI.py > upload.txt
          cat upload.txt
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          VERSION_CODE: ${{steps.apk.outputs.versionCode}}
          VERSION_NAME: ${{steps.apk.outputs.versionNum}}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

  telegram-bot-api:
    if: github.event.inputs.run_mode == 'full_run'
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v4
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary
